[user]
    name = Martyn Gigg
    email = martyn.gigg@gmail.com
[core]
    editor = emacs
[color]
    branch = auto
    diff = auto
    status = auto
[color "branch"]
    current = red reverse
    local = blue
    remote = green
[color "diff"]
    meta = yellow
    frag = magenta
    old = red bold
    new = green
    plain = white
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[merge]
    tool = kdiff3
    conflictstyle = diff3
[mergetool "kdiff3"]
    path = kdiff3
[web]
    browser = google-chrome
[push]
    default = simple
[pull]
    default = current
[clangFormat]
    binary = /usr/bin/clang-format-6.0
    style = LLVM
[branch]
  autosetuprebase = always
  autosetupmerge = false
[apply]
  whitespace = nowarn
[alias]
    st = status -s
    cl = clone
    ci = commit
    cm = commit -m
    cma = commit -a -m
    ca = commit --amend
    amend = commit --amend
    caa = commit -a --amend -C HEAD

    filelog = log -u
    files-changed = "!f() { git log --name-only --format= upstream/master.. | sort | uniq;  }; f"
    cppfiles-changed = "!f() { git log --name-only --format= upstream/master.. | sort | uniq | grep -E \"\\.cpp|\\.h|\\.tcc\"; }; f"
    clformat = "!f() { for f in `git cppfiles-changed`; do clang-format-6.0 -i $f; done;  }; f"
    fl = log -u
    ai = add --interactive
    co = checkout
    br = branch
    bra = branch -ra
    newtopic = "!f() { git fetch upstream ${2:-master} && git co --no-track -b "$1" FETCH_HEAD; }; f"

    # list commands
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    ls = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    # list all aliases
    la = "!git config -l | grep alias | cut -c 7-"

    diff = diff --word-diff
    d = diff --word-diff
    dc = diff --cached

    # list modified files in last commit
    dl = "!git ll -1"

    # diff last commit
    dlc = diff --cached HEAD^
    dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"

    # reset commands
    r = reset
    rh = reset --hard

    # stash
    sl = stash list
    sp = stash pop

    # cherry pick
    cp = cherry-pick

    # merges
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    # remotes
    fetcur="!f() { CURBRANCH=$(git rev-parse --abbrev-ref HEAD) && git fetch origin +refs/heads/$CURBRANCH:refs/remotes/origin/$CURBRANCH; }; f"
    pulcur="!f() { CURBRANCH=$(git rev-parse --abbrev-ref HEAD) && git pull origin +refs/heads/$CURBRANCH:refs/remotes/origin/$CURBRANCH; }; f"

    # pull requests
    test-pr = "!f() { git fetch upstream +pull/$1/merge:pr/$1-merged && git checkout pr/$1-merged; }; f"
    sync-pr = "!f() { git fetch upstream +pull/$1/merge && git reset --hard FETCH_HEAD; }; f"
    prune-pr = "!f() { git branch | grep pr/ | xargs git branch -D }; f"

    # make safer force push easier
    pushf = push --force-with-lease

    # sync with upstream master
    sync-up = "!f() { git fetch upstream master && git rebase FETCH_HEAD; }; f"
[rerere]
	enabled = true
[rebase]
  autosquash = true
[credential]
	helper = cache
[diff]
	noprefix = true
